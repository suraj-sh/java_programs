11.1  Introduce the concept of parallel streams.

->  Parallel streams in Java allow you to leverage multi-core processors to perform operations 
    on stream elements concurrently, potentially speeding up processing for tasks that can be 
    divided into parallel workloads.

    Concept of Parallel Streams:
    - Parallel streams are a feature in Java that allow you to process elements in a stream concurrently.
    - They are created from regular streams and enable parallelism for operations like 
      `filter`, `map`, and `reduce`.
    - Parallel streams can improve performance for tasks that can be split into independent subtasks, 
      making use of multiple processor cores.

    Example: Using parallel streams for parallel processing:

    import java.util.Arrays;
    import java.util.List;

    public class ParallelStreamsExample{
        public static void main(String[] args){
            List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

            // Sequential stream
            long sequentialTime = System.currentTimeMillis();
            long sequentialSum = numbers.stream()
                    .mapToLong(Integer::intValue)
                    .sum();
            System.out.println("Sequential Sum: " + sequentialSum);
            System.out.println("Sequential Time: " + (System.currentTimeMillis() - sequentialTime) + "ms");

            // Parallel stream
            long parallelTime = System.currentTimeMillis();
            long parallelSum = numbers.parallelStream()
                    .mapToLong(Integer::intValue)
                    .sum();
            System.out.println("Parallel Sum: " + parallelSum);
            System.out.println("Parallel Time: " + (System.currentTimeMillis() - parallelTime) + "ms");
        }
    }

    In this example:

    - We have a list of integers (`numbers`).
    - We calculate the sum of these numbers using both a sequential stream and a parallel stream.
    - The parallel stream leverages multiple processor cores for parallel processing, potentially 
      reducing execution time for certain tasks.

    Parallel streams are a powerful tool for optimizing performance in tasks that can be parallelized,
    but they should be used judiciously, as they may not always provide a performance benefit and can 
    introduce thread-safety considerations.