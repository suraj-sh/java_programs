10.4  Illustrate the partitioningBy() collector.

->  The `partitioningBy()` collector in Java is used to partition elements of a stream 
    into two groups based on a specified condition, resulting in a `Map` with two partitions: 
    one for elements that satisfy the condition and another for elements that do not. 

    Example: Partitioning even and odd numbers from a list:

    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    public class PartitioningByExample{
        public static void main(String[] args){
            List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

            // Partition numbers into even and odd using partitioningBy
            Map<Boolean, List<Integer>> evenAndOdd = numbers.stream()
                    .collect(Collectors.partitioningBy(num -> num % 2 == 0));

            // Print the result
            List<Integer> evenNumbers = evenAndOdd.get(true);
            List<Integer> oddNumbers = evenAndOdd.get(false);

            System.out.println("Even numbers: " + evenNumbers);
            System.out.println("Odd numbers: " + oddNumbers);
        }
    }

    In this example:

    - We have a list of integers (`numbers`).
    - We use `Collectors.partitioningBy(num -> num % 2 == 0)` to partition the numbers 
      into even and odd based on the condition `num % 2 == 0`.
    - The resulting `evenAndOdd` map has two partitions: `true` for even numbers and 
      `false` for odd numbers.
    - We print the even and odd numbers separately.

    This illustrates how the `partitioningBy()` collector can be used to split elements into two 
    groups based on a condition, providing a convenient way to categorize data into binary categories.